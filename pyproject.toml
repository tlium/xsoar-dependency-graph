[project]
name = "xsoar-dependency-graph"
dynamic = ["version"]
description = "Creates and plots a dependency graph for XSOAR content packs."
readme = "README.md"
authors = [{ name = "TorbjÃ¸rn Lium", email = "torben@lium.org" }]
license = { file = "LICENSE" }
classifiers = [
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
keywords = ["xsoar", "utilities", "graph"]
dependencies = [
    "networkx >= 3.0.0",
    "matplotlib >= 3.0.0",
    "numpy >= 2.0.0",
    "scipy >= 1.0.0",
    "pyyaml >= 6.0.0",
]

[project.urls]
Homepage = "https://github.com/tlium/xsoar-dependency-graph"
Issues = "https://github.com/tlium/xsoar-dependency-graph/issues"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.version]
path = "src/__about__.py"

[tool.hatch.build.targets.wheel]
packages = ["src/utils"]

# pytest.ini or .pytest.ini
[tool.pytest.ini_options]
addopts = "-ra -q"
testpaths = ["tests"]
minversion = "6.0"
norecursedirs = ["tests/data"]

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "tests",
    "venv",
]

# Same as Black.
line-length = 88
indent-width = 4

# Assume Python 3.12
target-version = "py312"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = ["E4", "E7", "E9", "F"]
ignore = []

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"

[tool.flake8]
extend-ignore = "E203"
exclude = ".git,__pycache__,docs/source/conf.py,old,build,dist,tests,.venv,venv"
max-complexity = "10"
